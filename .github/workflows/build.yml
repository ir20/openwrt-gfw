on:
  push:
    branches:
      - master
  schedule:
    - cron:  '0 0 * * 0'
jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      id: ${{ steps.create-release.outputs.id }}
    steps:
      - id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_id }}
          draft: true
  build-package:
    strategy:
      matrix:
        beta: [false]
        download-url:
          - https://downloads.openwrt.org/releases/19.07.6/targets/x86/64/openwrt-sdk-19.07.6-x86-64_gcc-7.5.0_musl.Linux-x86_64.tar.xz
          - https://downloads.openwrt.org/releases/19.07.6/targets/x86/generic/openwrt-sdk-19.07.6-x86-generic_gcc-7.5.0_musl.Linux-x86_64.tar.xz
        include:
          - download-url: https://downloads.openwrt.org/releases/19.07.6/targets/x86/geode/openwrt-sdk-19.07.6-x86-geode_gcc-7.5.0_musl.Linux-x86_64.tar.xz
            beta: true
    runs-on: ubuntu-latest
    needs: create-release
    continue-on-error: ${{ matrix.beta }}
    steps:
      - uses: actions/checkout@v2
      - name: login
        run: echo "${{ secrets.docker_password }}" | docker login -u "${{ secrets.docker_username }}" --password-stdin
      - name: env
        run: echo arch=$(echo ${{ matrix.download-url }} | sed -e 's/.*openwrt-sdk-19.07.6-\(.*\)_gcc.*/\1/') >> $GITHUB_ENV
      - name: build
        run: docker build --build-arg URL=${{ matrix.download-url }} -t ${{ secrets.docker_repo }}:${{ env.arch }} .
      - name: push
        run: docker push ${{ secrets.docker_repo }}:${{ env.arch }}
      - name: output
        run: docker cp $(docker run -d ${{ secrets.docker_repo }}:${{ env.arch }}):/output ./${{ env.arch }}
      - name: release
        run: zip -r ${{ env.arch }} ${{ env.arch }}
      - name: upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.arch }}.zip
          asset_name: ${{ env.arch }}.zip
          asset_content_type: application/zip
  publish-release:
    name: publish-release
    runs-on: ubuntu-latest
    needs: 
      - create-release
      - build-package
    steps:
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-release.outputs.id }}
